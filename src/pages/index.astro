---
import Image from "astro/components/Image.astro";
import Layout from "../layouts/Layout.astro";
import SiteFooter from "../components/SiteFooter.astro";
import Button from "../components/Button.astro";

const title = "Organize Your Ideas Visually";
---

<Layout title={`Bleep Â· ${title}`}>
  <main>
    <section class="hero">
      <div class="hero-logo animate-item">
        <Image
          src="/assets/icon_128x128@2x.png"
          alt="Abstract lowercase letter 'b' representing Bleep"
          width="64"
          height="64"
        />
      </div>

      <header>
        <h1 class="animate-item">
          Organize Your Ideas Visually
        </h1>
        <h2 class="animate-item">
          Bookmark, get inspired, and<br />make your own personal collection
        </h2>
      </header>
    </section>

    <div class="screenshot-container animate-item" data-parallax-container>
      <picture class="screenshot" data-parallax-layer="near">
        <source
          srcset="/assets/screenshot_dark.png"
          media="(prefers-color-scheme: dark)"
        />
        <img
          src="/assets/screenshot_light.png"
          alt="A screenshot of the Bleep app featuring content cards in a square grid"
        />
      </picture>
      <div class="drag-image" data-parallax-layer="far"></div>
    </div>
    <p class="downloads-buttons animate-item">
      <Button
        href="https://apps.apple.com/app/bleep-think-visually/id1638417383"
      >
        Get for iPhone &amp; iPad
      </Button>
      <Button
        href="https://apps.apple.com/app/bleep-think-visually/id6478577586"
      >
        Get for Mac
      </Button>
    </p>
  </main>
  <SiteFooter animate />
</Layout>

<script>
  // Check if animations have played this session
  const hasAnimationsPlayed = sessionStorage.getItem("hasAnimationsPlayed");

  if (!hasAnimationsPlayed) {
    // Add animation classes to elements
    document.querySelectorAll(".animate-item").forEach((element, index) => {
      element.classList.add("animate");
    });

    // Store that animations have played
    sessionStorage.setItem("hasAnimationsPlayed", "true");
  }

  // Parallax effect on mouse move
  const parallaxContainer = document.querySelector('[data-parallax-container]');
  
  if (parallaxContainer) {
    const nearLayer = parallaxContainer.querySelector('[data-parallax-layer="near"]');
    const farLayer = parallaxContainer.querySelector('[data-parallax-layer="far"]');
    
    let isAnimating = false;
    
    parallaxContainer.addEventListener('mousemove', (e) => {
      if (isAnimating) return;
      isAnimating = true;
      
      requestAnimationFrame(() => {
        const rect = parallaxContainer.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        
        // Calculate normalized offset from center (-1 to 1)
        const offsetX = (e.clientX - centerX) / (rect.width / 2);
        const offsetY = (e.clientY - centerY) / (rect.height / 2);
        
        // Apply different movement intensities for each layer
        // Near layer (screenshot) moves less
        const nearIntensity = 10; // pixels
        const nearX = offsetX * nearIntensity;
        const nearY = offsetY * nearIntensity;
        
        // Far layer (drag image) moves MUCH more - appears closer to viewer
        const farIntensity = 50; // pixels - much larger radius for dramatic parallax
        const farX = offsetX * farIntensity;
        const farY = offsetY * farIntensity;
        
        // Apply transforms
        if (nearLayer) {
          nearLayer.style.transform = `translate(${nearX}px, ${nearY}px)`;
        }
        
        if (farLayer) {
          farLayer.style.transform = `scale(0.35) translateX(calc(-25% + ${farX}px)) translateY(calc(-35% + ${farY}px))`;
        }
        
        isAnimating = false;
      });
    });
    
    // Reset on mouse leave
    parallaxContainer.addEventListener('mouseleave', () => {
      if (nearLayer) {
        nearLayer.style.transform = '';
      }
      if (farLayer) {
        farLayer.style.transform = 'scale(0.35) translateX(-25%) translateY(-35%)';
      }
    });
  }
</script>

<style>
  main {
    padding: 0 var(--safe-area-padding);
  }

  h1 {
    word-spacing: 0.075em;
  }

  .hero {
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-top: 3.5em;
  }

  .hero-logo {
    margin-bottom: 0.5rem;
    position: relative;
    z-index: 1;
    &::before {
      content: "";
      position: absolute;
      inset: 0px;
      z-index: -1;
      filter: blur(20px);
      background: rgb(from var(--color-accent) r g b / 0.4);
    }
  }

  header h1 {
    font-family: "Jugendreisen", serif;
    font-weight: 400;
    font-size: 1.5em;
    line-height: 1.2;
    margin-bottom: 0.5em;
  }

  header h2 {
    font-weight: 500;
    font-size: 1rem;
    color: var(--body-secondary-foreground-color);
    line-height: 1.2;
  }

  @media (min-width: 720px) {
    .hero-logo {
      margin-bottom: 1.75rem;
    }
    header h1 {
      font-size: 2em;
      margin-bottom: 0.25em;
    }

    header h2 {
      font-size: 1.15rem;
    }
  }

  .screenshot-container {
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 3rem auto;
    position: relative;
    perspective: 1000px;
  }

  .screenshot {
    position: relative;
    transition: transform 0.3s cubic-bezier(0.2, 0.8, 0.2, 1);
    will-change: transform;
  }

  .screenshot img {
    max-width: 100%;
    max-height: 40vh;
    object-fit: contain;
    box-shadow:
      0 0 0 1px rgba(var(--shadow-color-rgb), 0.1),
      0 20px 40px -15px rgba(var(--shadow-color-rgb), 0.15);
    border-radius: 6px;
  }

  @media (min-width: 720px) {
    .screenshot img {
      border-radius: 12px;
    }
  }

  .drag-image {
    position: absolute;
    background: url("/assets/drag_light.png");
    background-size: contain;
    width: 81%;
    padding-bottom: 86%;
    filter: drop-shadow(0 0 30px rgba(0, 0, 0, 0.3));
    transform: scale(0.35) translateX(-25%) translateY(-35%);
    transform-origin: left bottom;
    left: 0;
    bottom: 0;
    pointer-events: none;
    transition: transform 0.3s cubic-bezier(0.2, 0.8, 0.2, 1);
    will-change: transform;
  }

  @media (prefers-color-scheme: dark) {
    .drag-image {
      background: url("/assets/drag_dark.png");
      background-size: contain;
    }
  }

  .downloads-buttons {
    display: flex;
    gap: 1em;
    justify-content: center;
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideUpAndScale {
    from {
      opacity: 0;
      transform: translateY(20px) scale(0.9);
    }

    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  /* Set initial state for all animated elements */
  .animate {
    opacity: 0;
  }

  /* Apply animations only when .animate class is present */
  .hero-logo.animate {
    animation: slideUpAndScale 0.8s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;
    animation-delay: 0.4s;
  }

  header h1.animate {
    animation: slideUp 0.8s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;
    animation-delay: 0.4s;
  }

  header h2.animate {
    animation: slideUp 0.8s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;
    animation-delay: 0.5s;
  }

  .screenshot-container.animate {
    animation: slideUp 0.5s ease-out forwards;
    animation-delay: 0.15s;
  }

  .downloads-buttons.animate {
    animation: slideUp 0.4s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;
    animation-delay: 0.8s;
  }
  .screenshot img {
    background: #EFEFF1;
  }
  
  @media (prefers-color-scheme: dark) {
    .screenshot img {
      background: #292929;
      border-top: 1px solid #444;
    }
  }
</style>
