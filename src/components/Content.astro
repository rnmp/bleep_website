<div class="content">
  <slot />
</div>

<style is:global>
  .content {
    flex: 1;
    align-self: center;
    max-width: 540px;
    font-size: 0.9em;
    padding: 20px var(--safe-area-padding);
  }

  @media (min-width: 720px) {
    .content {
      font-size: 1em;
    }
    .content {
      padding: 80px var(--safe-area-padding);
    }
  }

  .content a {
    color: var(--link-color);
    text-decoration: underline;
    text-decoration-style: wavy;
  }

  .content h1,
  .content h2 {
    word-spacing: 0.075em;
    font-family: "Corben", serif;
    font-weight: 400;
  }
  .content > ul,
  .content > ol {
    margin-left: 1.5rem;
  }

  .content ul {
    list-style-type: square;
  }

  .content > * + * {
    margin-top: 1rem;
  }

  .content img,
  .content video {
    max-width: 100%;
    height: auto;
    border-radius: var(--safe-area-padding);
    margin: 0 auto;
  }

  .content hr {
    margin: 2rem 0;
    border: 0;
    border-top: 1px dashed var(--body-secondary-foreground-color);
  }

  .content code {
    color: var(--color-accent);
    background-color: color-mix(in srgb, var(--color-accent) 15%, transparent);
    padding: 0.2em 0.4em;
    border-radius: 4px;
    font-size: 0.9em;
    font-weight: 500;
    font-family: "SF Mono", SFMono-Regular, ui-monospace, "DejaVu Sans Mono",
      Menlo, Consolas, monospace;
  }

  .content table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    border-radius: 12px;
    border: 1px solid
      color-mix(in srgb, var(--body-foreground-color) 10%, transparent);
    overflow: hidden;
    margin: 1rem 0;
  }

  .content td:nth-child(3),
  .content th:nth-child(3) {
    display: none;
  }

  @media (min-width: 720px) {
    .content td:nth-child(3),
    .content th:nth-child(3) {
      display: table-cell;
    }
  }

  .content th {
    background-color: color-mix(
      in srgb,
      var(--body-foreground-color) 10%,
      transparent
    );
    text-align: left;
    padding: 0.75rem 1rem;
    font-weight: 500;
  }

  .content td {
    padding: 0.75rem 1rem;
  }

  .content tr:nth-child(even) {
    background-color: color-mix(
      in srgb,
      var(--body-foreground-color) 5%,
      transparent
    );
  }

  .content tr:nth-child(odd) {
    background-color: transparent;
  }

  .content tr:last-child td:first-child {
    border-bottom-left-radius: 11px;
  }

  .content tr:last-child td:last-child {
    border-bottom-right-radius: 11px;
  }

  .content th:first-child {
    border-top-left-radius: 11px;
  }

  .content th:last-child {
    border-top-right-radius: 11px;
  }

  .content .video-wrapper {
    display: flex;
    justify-content: center;
    background-color: color-mix(in srgb, var(--link-color) 10%, transparent);
    border-radius: var(--safe-area-padding);
  }

  .content .video-wrapper.portrait {
    padding: 1rem;
  }

  .content .video-wrapper.portrait video {
    min-width: 300px;
    max-width: 300px;
    border-radius: 12px;
  }

  .content li img {
    display: inline-block;
    width: 24px;
    border-radius: 8px !important;
    vertical-align: middle;
  }
</style>

<script>
  const links = document.querySelectorAll(
    '.content a[href$=".mov"], .content a[href$=".mp4"]'
  );

  links.forEach((link) => {
    const videoUrl = link.getAttribute("href");
    const videoContainer = document.createElement("div");
    videoContainer.className = "video-wrapper";

    const isPortraitVideo = videoUrl?.includes("_portrait");
    if (isPortraitVideo) {
      videoContainer.classList.add("portrait");
    }

    const video = document.createElement("video");
    video.setAttribute("muted", "");
    video.setAttribute("playsinline", "");
    video.setAttribute("loop", "");
    video.src = `${videoUrl}#t=0.001`;

    // Add click handler to toggle play/pause
    videoContainer.addEventListener("click", () => {
      if (video.paused) {
        video.play();
      } else {
        video.pause();
      }
    });

    // Add pointer cursor to indicate clickable
    videoContainer.style.cursor = "pointer";

    // Add play button overlay
    const playButton = document.createElement("div");
    playButton.style.position = "absolute";
    playButton.style.top = "50%";
    playButton.style.left = "50%";
    playButton.style.transform = "translate(-50%, -50%)";
    playButton.style.fontSize = "32px";
    playButton.style.color = "white";
    playButton.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
    playButton.style.backdropFilter = "blur(4px)";

    playButton.style.width = "48px";
    playButton.style.height = "48px";
    playButton.style.borderRadius = "50%";
    playButton.style.display = "flex";
    playButton.style.alignItems = "center";
    playButton.style.justifyContent = "center";
    playButton.style.transition = "opacity 0.2s ease-in-out";
    playButton.innerHTML = "<span style='margin-left: 3px'>▶</span>";
    // Hide play button when video is playing (unless hovering)
    video.addEventListener("play", () => {
      playButton.style.opacity = "0";

      // Show on hover while playing
      videoContainer.addEventListener("mouseenter", () => {
        if (!video.paused) playButton.style.opacity = "1";
      });

      videoContainer.addEventListener("mouseleave", () => {
        if (!video.paused) playButton.style.opacity = "0";
      });
    });

    // Always show play button when paused
    video.addEventListener("pause", () => {
      playButton.style.opacity = "1";
    });

    playButton.style.pointerEvents = "none"; // Let clicks pass through to video
    videoContainer.style.position = "relative"; // For absolute positioning of play button
    videoContainer.appendChild(playButton);

    // Update play/pause icon based on video state
    video.addEventListener("play", () => {
      playButton.innerHTML = "⏸";
    });

    video.addEventListener("pause", () => {
      playButton.innerHTML = "<span style='margin-left: 3px'>▶</span>";
    });

    videoContainer.appendChild(video);
    link.parentNode?.replaceChild(videoContainer, link);
  });
</script>
